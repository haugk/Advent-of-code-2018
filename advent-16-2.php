<?php

$tt = <<<EOT
1 2 3 0
1 0 0 3
0 2 0 2
6 2 3 2
8 3 2 0
0 0 3 0
10 1 0 1
15 1 1 2
1 3 3 3
1 1 3 0
1 2 0 1
1 1 3 0
0 0 2 0
10 0 2 2
15 2 0 3
1 0 2 1
1 1 1 0
1 3 0 2
0 0 2 0
0 0 2 0
10 0 3 3
15 3 3 1
1 0 0 2
1 3 0 0
1 0 1 3
13 2 0 0
0 0 1 0
10 1 0 1
15 1 2 0
1 2 2 2
1 1 3 1
12 2 3 3
0 3 1 3
0 3 1 3
10 0 3 0
15 0 1 1
1 3 1 2
1 0 1 3
1 3 2 0
2 0 2 2
0 2 1 2
10 1 2 1
15 1 1 2
0 2 0 0
6 0 1 0
0 0 0 1
6 1 2 1
1 2 1 3
12 1 3 0
0 0 3 0
10 0 2 2
15 2 1 0
1 3 3 1
1 0 2 3
1 3 1 2
8 3 2 3
0 3 3 3
10 0 3 0
15 0 2 3
1 3 1 0
1 0 2 2
1 0 2 1
13 2 0 0
0 0 3 0
10 0 3 3
1 3 2 2
0 0 0 0
6 0 3 0
1 2 1 1
11 1 0 0
0 0 3 0
10 3 0 3
1 1 3 0
0 3 0 1
6 1 1 1
1 2 2 2
15 0 2 1
0 1 2 1
10 3 1 3
15 3 0 2
1 3 2 1
1 2 2 3
1 0 2 0
14 1 3 1
0 1 3 1
0 1 2 1
10 2 1 2
15 2 3 0
1 3 2 2
1 3 1 1
2 1 2 3
0 3 3 3
10 0 3 0
15 0 3 1
0 3 0 3
6 3 1 3
1 1 3 0
1 2 0 2
15 0 2 0
0 0 1 0
10 0 1 1
15 1 1 0
1 3 2 1
1 0 3 2
1 2 3 2
0 2 1 2
10 2 0 0
15 0 2 1
1 1 3 0
1 0 3 3
1 2 3 2
7 3 2 3
0 3 3 3
10 3 1 1
15 1 2 0
0 2 0 2
6 2 0 2
1 3 0 3
1 0 0 1
2 3 2 3
0 3 1 3
10 3 0 0
15 0 2 3
1 3 1 0
0 3 0 1
6 1 3 1
2 0 2 2
0 2 3 2
10 2 3 3
15 3 0 2
1 2 2 0
1 2 0 3
0 1 0 1
6 1 2 1
5 0 3 0
0 0 2 0
10 2 0 2
15 2 3 0
1 0 1 2
0 1 0 1
6 1 1 1
1 1 2 3
0 3 2 2
0 2 3 2
0 2 2 2
10 2 0 0
15 0 1 2
1 1 2 0
1 0 1 3
1 3 0 1
6 0 1 0
0 0 1 0
0 0 3 0
10 2 0 2
15 2 0 1
0 1 0 0
6 0 0 0
1 2 2 2
7 3 2 3
0 3 2 3
0 3 2 3
10 3 1 1
1 0 2 3
12 2 3 0
0 0 2 0
10 1 0 1
0 2 0 3
6 3 3 3
0 0 0 2
6 2 0 2
0 3 0 0
6 0 2 0
2 3 2 3
0 3 1 3
10 3 1 1
1 2 3 3
1 3 3 2
1 1 3 0
9 0 3 2
0 2 1 2
10 2 1 1
15 1 1 3
1 3 3 2
1 0 0 1
6 0 1 1
0 1 3 1
10 1 3 3
15 3 2 2
1 3 2 3
1 1 0 1
10 0 0 1
0 1 1 1
10 2 1 2
15 2 1 1
1 0 2 2
1 3 1 0
0 0 0 3
6 3 2 3
8 2 3 3
0 3 2 3
10 3 1 1
15 1 0 2
1 2 0 0
1 1 1 3
0 2 0 1
6 1 3 1
4 0 3 1
0 1 2 1
0 1 2 1
10 2 1 2
1 3 1 1
1 2 3 3
3 0 1 0
0 0 2 0
10 2 0 2
15 2 3 1
1 0 3 2
1 3 3 0
8 2 3 0
0 0 2 0
0 0 2 0
10 0 1 1
15 1 3 0
1 2 2 2
1 3 2 1
1 0 2 3
7 3 2 1
0 1 2 1
10 0 1 0
15 0 0 3
0 0 0 2
6 2 0 2
1 3 1 1
1 1 1 0
6 0 1 0
0 0 3 0
0 0 2 0
10 3 0 3
15 3 3 1
1 1 2 0
0 2 0 2
6 2 2 2
1 0 1 3
7 3 2 2
0 2 1 2
10 2 1 1
15 1 1 2
0 1 0 0
6 0 2 0
1 2 2 1
1 1 1 3
4 0 3 1
0 1 2 1
10 1 2 2
0 1 0 3
6 3 2 3
0 1 0 1
6 1 1 1
1 1 1 0
10 1 0 1
0 1 2 1
10 1 2 2
15 2 3 3
0 3 0 1
6 1 3 1
0 1 0 2
6 2 0 2
6 0 1 1
0 1 3 1
10 3 1 3
15 3 1 0
1 2 0 3
0 2 0 1
6 1 3 1
8 2 3 3
0 3 3 3
10 0 3 0
1 1 1 3
1 0 0 1
0 3 2 3
0 3 1 3
10 3 0 0
15 0 3 1
1 1 3 3
1 3 1 0
0 2 0 2
6 2 2 2
11 2 0 0
0 0 1 0
10 1 0 1
15 1 3 0
1 0 0 3
0 2 0 2
6 2 3 2
1 1 3 1
0 1 2 3
0 3 1 3
0 3 3 3
10 0 3 0
15 0 1 2
1 1 3 0
0 2 0 1
6 1 0 1
1 1 0 3
6 0 1 1
0 1 3 1
10 2 1 2
15 2 3 0
1 3 2 1
1 0 2 2
6 3 1 2
0 2 3 2
10 2 0 0
1 0 3 1
1 0 3 3
0 3 0 2
6 2 2 2
7 3 2 1
0 1 3 1
10 0 1 0
15 0 2 1
1 1 3 3
0 3 0 0
6 0 3 0
0 2 0 2
6 2 0 2
1 2 3 3
0 3 1 3
10 1 3 1
15 1 1 2
1 2 3 3
1 2 3 1
14 0 1 0
0 0 1 0
10 2 0 2
15 2 0 0
0 0 0 3
6 3 0 3
1 2 0 2
1 0 2 1
7 3 2 2
0 2 1 2
0 2 3 2
10 0 2 0
15 0 3 3
1 2 2 2
1 2 2 1
0 1 0 0
6 0 3 0
11 1 0 1
0 1 3 1
10 1 3 3
15 3 3 1
1 2 1 0
0 0 0 3
6 3 1 3
1 0 0 2
4 0 3 3
0 3 1 3
10 3 1 1
15 1 1 3
1 1 3 0
1 1 1 1
10 1 0 2
0 2 3 2
10 2 3 3
15 3 1 1
1 2 1 3
1 2 2 2
12 2 3 3
0 3 3 3
10 1 3 1
15 1 3 2
1 2 1 1
1 2 2 3
1 3 2 0
14 0 3 1
0 1 1 1
10 1 2 2
1 2 0 1
11 1 0 1
0 1 3 1
0 1 2 1
10 1 2 2
1 2 2 1
14 0 1 1
0 1 2 1
0 1 2 1
10 1 2 2
15 2 0 0
1 0 2 2
1 3 3 1
0 0 0 3
6 3 3 3
2 3 2 1
0 1 1 1
10 0 1 0
15 0 1 1
1 0 2 3
0 1 0 2
6 2 3 2
1 1 3 0
8 3 2 3
0 3 2 3
0 3 3 3
10 3 1 1
15 1 3 2
1 2 3 3
1 2 3 1
0 0 0 0
6 0 2 0
5 0 3 3
0 3 1 3
10 2 3 2
15 2 0 3
1 1 0 0
0 3 0 2
6 2 0 2
0 0 2 0
0 0 2 0
10 0 3 3
15 3 3 1
0 1 0 0
6 0 3 0
1 2 1 3
1 1 3 2
2 0 2 3
0 3 1 3
0 3 2 3
10 1 3 1
1 1 1 0
1 2 3 3
1 2 3 2
15 0 2 3
0 3 1 3
10 1 3 1
1 3 3 0
1 1 2 3
3 2 0 3
0 3 1 3
0 3 2 3
10 1 3 1
15 1 2 0
1 3 2 2
1 1 0 3
1 3 3 1
2 1 2 3
0 3 3 3
0 3 3 3
10 3 0 0
1 0 0 3
0 1 0 1
6 1 2 1
1 2 3 2
7 3 2 1
0 1 2 1
10 0 1 0
15 0 3 2
1 2 0 0
1 2 0 3
1 3 2 1
5 0 3 1
0 1 3 1
0 1 1 1
10 1 2 2
15 2 3 1
1 3 0 3
1 1 2 0
0 1 0 2
6 2 0 2
2 3 2 3
0 3 3 3
10 1 3 1
15 1 1 2
1 3 0 1
1 2 1 3
1 0 2 0
14 1 3 3
0 3 3 3
0 3 3 3
10 3 2 2
15 2 1 1
1 0 2 2
1 2 3 0
0 0 0 3
6 3 1 3
0 3 2 0
0 0 3 0
10 1 0 1
15 1 0 3
1 2 2 2
1 1 3 0
1 3 0 1
10 0 0 0
0 0 3 0
10 3 0 3
15 3 0 0
0 3 0 2
6 2 0 2
1 1 1 3
6 3 1 3
0 3 1 3
0 3 3 3
10 0 3 0
15 0 1 1
0 0 0 2
6 2 2 2
1 1 2 3
1 2 0 0
4 0 3 3
0 3 1 3
0 3 2 3
10 1 3 1
1 0 1 0
1 0 0 2
1 2 3 3
8 2 3 3
0 3 2 3
10 1 3 1
1 3 3 0
1 2 1 3
14 0 3 2
0 2 3 2
10 1 2 1
15 1 0 2
1 2 0 0
1 3 1 1
3 0 1 3
0 3 3 3
10 2 3 2
15 2 2 3
1 3 0 2
14 1 0 2
0 2 3 2
10 3 2 3
15 3 3 1
1 0 2 0
1 0 2 2
0 1 0 3
6 3 2 3
1 2 0 0
0 0 1 0
0 0 1 0
10 1 0 1
15 1 3 3
1 3 3 1
1 2 3 0
1 1 1 2
14 1 0 1
0 1 3 1
10 1 3 3
15 3 0 2
1 0 2 1
1 2 1 3
5 0 3 1
0 1 1 1
10 2 1 2
15 2 3 1
1 0 1 3
1 1 0 0
1 2 1 2
7 3 2 0
0 0 3 0
0 0 2 0
10 1 0 1
0 2 0 0
6 0 3 0
1 1 2 3
1 3 3 2
0 3 2 0
0 0 2 0
10 0 1 1
15 1 0 0
1 0 3 2
0 1 0 1
6 1 0 1
6 3 1 1
0 1 1 1
10 1 0 0
15 0 1 3
1 1 0 0
1 0 2 1
6 0 1 1
0 1 2 1
0 1 3 1
10 3 1 3
15 3 1 0
1 0 1 1
1 2 3 3
8 2 3 3
0 3 1 3
0 3 1 3
10 3 0 0
15 0 0 1
1 1 1 3
0 0 0 0
6 0 2 0
1 2 0 2
9 3 0 3
0 3 3 3
0 3 1 3
10 1 3 1
1 3 3 2
1 2 2 3
13 0 2 2
0 2 1 2
10 2 1 1
15 1 0 0
1 0 0 3
1 1 3 1
1 2 2 2
7 3 2 3
0 3 2 3
0 3 3 3
10 3 0 0
15 0 2 1
1 1 2 0
1 3 2 2
1 2 0 3
9 0 3 3
0 3 3 3
10 3 1 1
1 1 0 3
1 2 2 0
9 3 0 2
0 2 3 2
10 1 2 1
1 0 0 2
9 3 0 0
0 0 3 0
10 1 0 1
15 1 3 2
1 2 0 1
1 2 2 0
9 3 0 0
0 0 2 0
10 2 0 2
1 2 2 3
1 2 1 0
12 1 3 3
0 3 1 3
10 3 2 2
1 1 0 0
0 1 0 3
6 3 2 3
9 0 3 1
0 1 1 1
10 1 2 2
15 2 2 0
0 2 0 2
6 2 3 2
1 3 0 1
14 1 3 2
0 2 2 2
10 0 2 0
15 0 1 2
1 2 1 0
0 1 0 1
6 1 1 1
1 1 0 3
4 0 3 3
0 3 2 3
10 2 3 2
15 2 0 0
0 3 0 3
6 3 0 3
1 2 3 2
7 3 2 1
0 1 3 1
10 1 0 0
15 0 2 1
1 2 0 0
0 2 0 3
6 3 3 3
1 3 2 2
13 0 2 0
0 0 2 0
0 0 1 0
10 1 0 1
1 2 3 2
1 0 3 3
1 0 1 0
12 2 3 2
0 2 2 2
10 1 2 1
15 1 1 2
1 0 0 1
1 2 1 3
1 2 3 0
5 0 3 3
0 3 2 3
10 3 2 2
15 2 1 3
1 3 1 0
1 2 3 2
3 2 0 1
0 1 2 1
10 1 3 3
15 3 1 1
0 1 0 0
6 0 2 0
0 3 0 3
6 3 1 3
4 0 3 2
0 2 1 2
10 2 1 1
15 1 0 3
1 1 0 0
1 0 0 1
1 1 2 2
6 0 1 1
0 1 3 1
10 1 3 3
15 3 0 0
0 1 0 1
6 1 2 1
1 3 1 3
1 0 0 2
14 3 1 2
0 2 1 2
10 0 2 0
15 0 3 3
0 3 0 2
6 2 1 2
1 3 0 0
0 1 0 1
6 1 3 1
2 0 2 1
0 1 2 1
10 1 3 3
15 3 3 1
1 2 0 0
1 2 2 2
1 1 2 3
4 0 3 0
0 0 2 0
10 0 1 1
15 1 1 3
1 3 0 1
1 1 2 0
1 0 2 2
0 0 2 1
0 1 2 1
10 3 1 3
1 2 0 1
1 2 3 2
15 0 2 0
0 0 1 0
10 0 3 3
15 3 1 0
1 3 1 1
0 1 0 3
6 3 1 3
6 3 1 3
0 3 3 3
10 0 3 0
15 0 3 1
1 0 0 3
1 3 0 0
11 2 0 2
0 2 1 2
10 1 2 1
1 0 1 2
1 0 0 0
1 3 0 2
0 2 3 2
10 2 1 1
1 1 2 0
1 0 3 2
1 1 3 3
0 3 2 3
0 3 2 3
10 1 3 1
15 1 0 3
1 2 3 2
1 3 0 0
1 3 0 1
3 2 1 0
0 0 3 0
10 0 3 3
15 3 1 2
1 2 1 1
1 0 1 3
0 1 0 0
6 0 3 0
14 0 1 3
0 3 1 3
0 3 2 3
10 2 3 2
15 2 0 1
0 2 0 3
6 3 0 3
1 3 0 2
1 2 1 0
12 0 3 3
0 3 3 3
10 3 1 1
15 1 3 0
0 3 0 3
6 3 0 3
1 1 3 1
0 1 2 2
0 2 1 2
10 0 2 0
15 0 2 2
1 2 0 3
1 2 2 0
5 0 3 1
0 1 3 1
10 1 2 2
15 2 2 1
1 3 2 2
1 3 1 3
2 3 2 0
0 0 1 0
0 0 1 0
10 0 1 1
0 1 0 2
6 2 2 2
1 2 0 3
1 2 0 0
12 2 3 2
0 2 2 2
0 2 1 2
10 2 1 1
15 1 3 3
1 1 1 0
1 3 2 2
1 2 1 1
11 1 2 0
0 0 3 0
10 0 3 3
15 3 2 1
1 2 2 0
1 3 2 3
2 3 2 2
0 2 3 2
0 2 2 2
10 2 1 1
1 0 1 2
1 1 2 3
4 0 3 2
0 2 2 2
10 2 1 1
15 1 3 0
0 2 0 2
6 2 2 2
1 0 2 3
1 0 0 1
7 3 2 3
0 3 1 3
10 3 0 0
1 2 1 3
1 2 3 1
1 1 0 2
12 1 3 2
0 2 1 2
0 2 2 2
10 0 2 0
1 0 0 2
8 2 3 1
0 1 2 1
10 1 0 0
15 0 1 3
1 2 3 2
0 0 0 0
6 0 1 0
1 3 0 1
15 0 2 1
0 1 2 1
10 3 1 3
15 3 2 1
1 2 1 0
1 1 0 2
0 2 0 3
6 3 2 3
5 0 3 2
0 2 2 2
10 2 1 1
15 1 1 0
1 1 2 3
0 0 0 1
6 1 0 1
0 1 0 2
6 2 1 2
10 3 3 2
0 2 1 2
10 0 2 0
15 0 2 2
1 2 3 0
1 2 1 1
1 2 0 3
12 1 3 0
0 0 2 0
10 2 0 2
0 1 0 1
6 1 3 1
1 1 1 3
1 0 0 0
6 3 1 3
0 3 2 3
10 2 3 2
15 2 1 0
1 3 1 2
1 0 1 3
8 3 2 2
0 2 2 2
10 0 2 0
15 0 1 2
1 1 2 1
1 1 0 0
1 1 0 3
10 0 0 0
0 0 2 0
0 0 3 0
10 0 2 2
15 2 0 0
0 0 0 2
6 2 2 2
0 3 0 1
6 1 2 1
10 3 3 3
0 3 1 3
0 3 1 3
10 3 0 0
15 0 0 1
1 3 0 0
1 3 2 3
3 2 0 2
0 2 3 2
10 2 1 1
15 1 1 3
1 1 3 1
1 3 1 2
0 1 2 1
0 1 2 1
10 3 1 3
15 3 2 0
EOT;

/*
$tt = <<<EOT
Before: [3, 2, 1, 1]
9 2 1 2
After:  [3, 2, 2, 1]
EOT;
*/


//echo $tt;

$t = str_replace('  ',' ',$tt);

$t = explode("\n", $t);

function op($code, $a, $b, $c, $reg)
{
	switch ($code) {
		case 0:
			// addr (add register) stores into register C the result of adding register A and register B.
			echo "\n\nADDR $a $b $c";
			$reg[$c] = $reg[$a] + $reg[$b];
			break;
	    case 1:
	    		// addi (add immediate) stores into register C the result of adding register A and value B.
			echo "\n\nADDI $a $b $c";
			$reg[$c] = $reg[$a] + $b;
	        break;

	    case 2:
	    		// mulr (multiply register) stores into register C the result of multiplying register A and register B.
			echo "\n\nMULR $a $b $c";
			$reg[$c] = $reg[$a] * $reg[$b];
	        break;
	    case 3:
	    		// muli (multiply immediate) stores into register C the result of multiplying register A and value B.
			echo "\n\nMULI $a $b $c";
			$reg[$c] = $reg[$a] * $b;
	        break;

	    case 4:
	    		// banr (bitwise AND register) stores into register C the result of the bitwise AND of register A and register B.
			echo "\n\nBANR $a $b $c";
			$reg[$c] = $reg[$a] & $reg[$b];
	        break;
	    case 5:
	    		// bani (bitwise AND immediate) stores into register C the result of the bitwise AND of register A and value B.
			echo "\n\nBANI $a $b $c";
			$reg[$c] = $reg[$a] & $b;
	        break;
	        
	    case 6:
	    		// borr (bitwise OR register) stores into register C the result of the bitwise OR of register A and register B.
			echo "\n\nBORR $a $b $c";
			$reg[$c] = $reg[$a] | $reg[$b];
	        break;
	    case 7:
	    		// bori (bitwise OR immediate) stores into register C the result of the bitwise OR of register A and value B.
			echo "\n\nBORI $a $b $c";
			$reg[$c] = $reg[$a] | $b;
//			echo "\n", $reg[$a], " | ", $b, " = ", $reg[$c];
	        break;
	        
	    case 8:
	    		// setr (set register) copies the contents of register A into register C. (Input B is ignored.)
			echo "\n\nSETR $a $b $c";
			$reg[$c] = $reg[$a];
	        break;
	    case 9:
	    		// seti (set immediate) stores value A into register C. (Input B is ignored.)
			echo "\n\nSETI $a $b $c";
			$reg[$c] = $a;
	        break;
	        
	    case 10:
	    		// gtir (greater-than immediate/register) sets register C to 1 if value A is greater than register B. Otherwise, register C is set to 0.
			echo "\n\nGTIR $a $b $c";
	    		$reg[$c] = ($a > $reg[$b]) ? 1 : 0;
	        break;
	    case 11:
	    		// gtri (greater-than register/immediate) sets register C to 1 if register A is greater than value B. Otherwise, register C is set to 0.
			echo "\n\nGTRI $a $b $c";
	    		$reg[$c] = ($reg[$a] > $b) ? 1 : 0;
	    case 12:
	    		// gtrr (greater-than register/register) sets register C to 1 if register A is greater than register B. Otherwise, register C is set to 0.
			echo "\n\nGTRR $a $b $c";
	    		$reg[$c] = ($reg[$a] > $reg[$b]) ? 1 : 0;
	        break;
	        
	    case 13:
	    		// eqir (equal immediate/register) sets register C to 1 if value A is equal to register B. Otherwise, register C is set to 0.
			echo "\n\nEQIR $a $b $c";
	    		$reg[$c] = ($a == $reg[$b]) ? 1 : 0;
	        break;
	    case 14:
	    		// eqri (equal register/immediate) sets register C to 1 if register A is equal to value B. Otherwise, register C is set to 0.
			echo "\n\nEQRI $a $b $c";
	    		$reg[$c] = ($reg[$a] == $b) ? 1 : 0;
	        break;
	    case 15:
	    		// eqrr (equal register/register) sets register C to 1 if register A is equal to register B. Otherwise, register C is set to 0.
			echo "\n\nEQRR $a $b $c";
	    		$reg[$c] = ($reg[$a] == $reg[$b]) ? 1 : 0;
	        break;
	        
	}	

	return $reg;
}

$codes = [3,
9,
5,
11,
12,
15,
1,
10,
14,
2,
0,
6,
7,
13,
4,
8];

//print_r($t);

$reg = [0,0,0,0];
foreach ($t as $l)
{
	$l = explode(' ', $l);
//	print_r($l);
	$reg = op($codes[$l[0]], $l[1], $l[2], $l[3], $reg);
	echo "\n", implode(' ',$reg);
	
}


echo "\n· • · • · • · S L U T · • · • · • ·";

?>